const _0x2d9c = ['DoubleSide', 'side', 'position', 'error', 'clientX', 'castShadow', 'startsWith', 'traverse', 'Vector2', 'flowX', 'shui', 'aspect', 'load', 'enablePan', 'height', 'camera', 'container', 'name', 'ground', 'HemisphereLight', 'setDecoderPath', 'left', 'CubeRefractionMapping', 'devicePixelRatio', 'setPixelRatio', 'add', 'sRGBEncoding', 'innerHeight', 'sub', '#container', 'innerWidth', 'normalize', 'color', 'shuzhuang', 'CubeTextureLoader', 'enableDamping', 'flowY', 'mapSize', 'jin', 'receiveShadow', 'domElement', 'mapping', 'shadow', 'top', 'right', 'onresize', 'render', 'start', 'getElementById', 'getDelta', 'querySelector', 'far', 'lookAt', 'model', 'models/Elephant_anim_01-processed.glb', 'update', 'Vector3', 'offsetHeight', 'textures/skybox/', 'unproject', 'setSize', 'log', 'WebGLRenderer', 'shadowMap', 'scale', 'clientY', 'children', 'background', 'Tween', 'rotateSpeed', 'getBoundingClientRect', 'width', 'DirectionalLight', 'PlaneBufferGeometry', 'outputEncoding', 'target', 'intersectObjects', 'mousedown', 'material', 'models/Crocodile-processed.glb', 'isMesh', 'minPolarAngle', '#6495ED', 'bush', 'addEventListener', 'rotation', 'minDistance', 'Clock', 'set', 'object', 'scene', 'updateProjectionMatrix', 'maxPolarAngle', 'length']; (function (_0x629fd6, _0x4f26a9) { const _0x2d9c0d = function (_0x155f4b) { while (--_0x155f4b) { _0x629fd6['push'](_0x629fd6['shift']()); } }; _0x2d9c0d(++_0x4f26a9); }(_0x2d9c, 0x13f)); const _0x155f = function (_0x629fd6, _0x4f26a9) { _0x629fd6 = _0x629fd6 - 0x1a5; let _0x2d9c0d = _0x2d9c[_0x629fd6]; return _0x2d9c0d; }; const _0x2a8ef2 = _0x155f; import *as _0x24f0e4 from './build/three.module.js'; import { OrbitControls } from './js/OrbitControls.js'; import { GLTFLoader } from './js/GLTFLoader.js'; import { Water } from './js/Water2.js'; import { TWEEN } from './js/tween.module.min.js'; import { DRACOLoader } from './js/DRACOLoader.js'; let mixer; const clock = new _0x24f0e4[(_0x2a8ef2(0x1d7))](), container = document[_0x2a8ef2(0x1b0)](_0x2a8ef2(0x1ee)); var mouseposX, mouseposY, tagList = [[_0x2a8ef2(0x1e8), 'tu', _0x2a8ef2(0x1a6)], [-1.6, 1.2, -3.7, 1.2, 1.6, -0.2, 0x0, 1.3, 2.4]], tags = []; let water; const params = { 'color': _0x2a8ef2(0x1d2), 'scale': 0x2, 'flowX': -0.2, 'flowY': 0.2 }, renderer = new _0x24f0e4[(_0x2a8ef2(0x1be))]({ 'antialias': !![] }); renderer[_0x2a8ef2(0x1f6)](window[_0x2a8ef2(0x1f5)]), renderer[_0x2a8ef2(0x1bc)](window[_0x2a8ef2(0x1fc)], window['innerHeight']), renderer[_0x2a8ef2(0x1ca)] = _0x24f0e4[_0x2a8ef2(0x1f8)], renderer[_0x2a8ef2(0x1bf)]['enabled'] = !![], container['appendChild'](renderer[_0x2a8ef2(0x1a8)]); const scene = new _0x24f0e4['Scene'](), path = _0x2a8ef2(0x1ba), format = '.jpg', urls = [path + 'px' + format, path + 'nx' + format, path + 'py' + format, path + 'ny' + format, path + 'pz' + format, path + 'nz' + format], reflectionCube = new _0x24f0e4['CubeTextureLoader']()[_0x2a8ef2(0x1ea)](urls), refractionCube = new _0x24f0e4[(_0x2a8ef2(0x200))]()[_0x2a8ef2(0x1ea)](urls); refractionCube[_0x2a8ef2(0x1a9)] = _0x24f0e4[_0x2a8ef2(0x1f4)], scene[_0x2a8ef2(0x1c3)] = reflectionCube; const camera = new _0x24f0e4['PerspectiveCamera'](0x2d, window[_0x2a8ef2(0x1fc)] / window['innerHeight'], 0.01, 0x96); camera[_0x2a8ef2(0x1e0)][_0x2a8ef2(0x1d8)](0x6, 0x4, 0x4); const controls = new OrbitControls(camera, renderer[_0x2a8ef2(0x1a8)]); controls[_0x2a8ef2(0x1cb)][_0x2a8ef2(0x1d8)](0x0, 0x0, 0x0), controls[_0x2a8ef2(0x1b7)](), controls[_0x2a8ef2(0x1eb)] = ![], controls[_0x2a8ef2(0x201)] = !![], controls[_0x2a8ef2(0x1d1)] = Math['PI'] * 0.15, controls[_0x2a8ef2(0x1dc)] = Math['PI'] * 0.4, 0.45, controls[_0x2a8ef2(0x1c5)] = 0.6, controls[_0x2a8ef2(0x1d6)] = 0x2, controls['maxDistance'] = 0x28, scene['add'](new _0x24f0e4[(_0x2a8ef2(0x1f1))](0x7d7d7d, 0x0, 1.4)); const dirLight = new _0x24f0e4[(_0x2a8ef2(0x1c8))](0xfff4d6, 0x2); dirLight['position'][_0x2a8ef2(0x1d8)](0x19, 0x19, 0x0), dirLight[_0x2a8ef2(0x1e3)] = !![], dirLight[_0x2a8ef2(0x1aa)][_0x2a8ef2(0x1a5)][_0x2a8ef2(0x1c7)] = 0xdc, dirLight[_0x2a8ef2(0x1aa)][_0x2a8ef2(0x1a5)][_0x2a8ef2(0x1ec)] = 0xdc, dirLight[_0x2a8ef2(0x1aa)]['camera'][_0x2a8ef2(0x1f3)] = -0xa, dirLight['shadow'][_0x2a8ef2(0x1ed)][_0x2a8ef2(0x1ac)] = 0xa, dirLight[_0x2a8ef2(0x1aa)]['camera'][_0x2a8ef2(0x1ab)] = -0xa, dirLight[_0x2a8ef2(0x1aa)][_0x2a8ef2(0x1ed)]['bottom'] = 0xa, dirLight[_0x2a8ef2(0x1aa)][_0x2a8ef2(0x1ed)]['near'] = 0x5, dirLight[_0x2a8ef2(0x1aa)][_0x2a8ef2(0x1ed)][_0x2a8ef2(0x1b3)] = 0x50, scene[_0x2a8ef2(0x1f7)](dirLight); const dracoLoader = new DRACOLoader(); dracoLoader[_0x2a8ef2(0x1f2)]('js/draco/gltf/'); const loader = new GLTFLoader(); loader['setDRACOLoader'](dracoLoader), loader[_0x2a8ef2(0x1ea)](_0x2a8ef2(0x1b6), function (_0x708d09) { const _0x4ce938 = _0x2a8ef2, _0x402c00 = _0x708d09[_0x4ce938(0x1da)]; _0x402c00[_0x4ce938(0x1e5)](function (_0x463ec0) { const _0xe8701f = _0x4ce938; _0x463ec0[_0xe8701f(0x1d0)] && (_0x463ec0[_0xe8701f(0x1ef)][_0xe8701f(0x1e4)]('grass1') && (_0x463ec0[_0xe8701f(0x1e3)] = !![]), _0x463ec0[_0xe8701f(0x1ef)][_0xe8701f(0x1e4)](_0xe8701f(0x1d3)) && (_0x463ec0[_0xe8701f(0x1e3)] = !![]), _0x463ec0[_0xe8701f(0x1ef)]['startsWith']('FernB') && (_0x463ec0[_0xe8701f(0x1e3)] = !![]), _0x463ec0[_0xe8701f(0x1ef)][_0xe8701f(0x1e4)](_0xe8701f(0x1ff)) && (_0x463ec0[_0xe8701f(0x1e3)] = !![], _0x463ec0[_0xe8701f(0x1a7)] = !![]), _0x463ec0['name'][_0xe8701f(0x1e4)](_0xe8701f(0x1f0)) && (_0x463ec0[_0xe8701f(0x1a7)] = !![]), _0x463ec0[_0xe8701f(0x1ce)][_0xe8701f(0x1df)] = _0x24f0e4[_0xe8701f(0x1de)]); }), _0x402c00[_0x4ce938(0x1c0)]['set'](0x1, 0x1, 0x1), _0x402c00[_0x4ce938(0x1ef)] = _0x4ce938(0x1b5), scene['add'](_0x402c00); const _0x1648be = new _0x24f0e4[(_0x4ce938(0x1c9))](0xb, 0xb); water = new Water(_0x1648be, { 'color': params[_0x4ce938(0x1fe)], 'scale': params[_0x4ce938(0x1c0)], 'flowDirection': new _0x24f0e4[(_0x4ce938(0x1e6))](params[_0x4ce938(0x1e7)], params[_0x4ce938(0x202)]), 'textureWidth': 0x400, 'textureHeight': 0x400 }), water[_0x4ce938(0x1e0)]['y'] = 0.36, water[_0x4ce938(0x1e0)]['x'] = 0.2, water['rotation']['x'] = Math['PI'] * -0.5, scene[_0x4ce938(0x1f7)](water); }, undefined, function (_0x340721) { const _0xfc4da7 = _0x2a8ef2; console[_0xfc4da7(0x1e1)](_0x340721); }), loader['load'](_0x2a8ef2(0x1cf), function (_0x204c0e) { const _0x4aedd2 = _0x2a8ef2, _0x34fcdd = _0x204c0e[_0x4aedd2(0x1da)]; _0x34fcdd['position'][_0x4aedd2(0x1d8)](-1.5, -0.2, -1.5), controls[_0x4aedd2(0x1cb)][_0x4aedd2(0x1d8)](_0x34fcdd[_0x4aedd2(0x1e0)]['x'], _0x34fcdd['position']['y'], _0x34fcdd[_0x4aedd2(0x1e0)]['z']), _0x34fcdd[_0x4aedd2(0x1d5)]['set'](0x0, Math['PI'] * -0.3, 0x0), _0x34fcdd[_0x4aedd2(0x1c0)]['set'](0x1, 0x1, 0x1), _0x34fcdd[_0x4aedd2(0x1ef)] = _0x4aedd2(0x1b5), scene[_0x4aedd2(0x1f7)](_0x34fcdd); }, undefined, function (_0x1b3f7b) { const _0x266ffa = _0x2a8ef2; console[_0x266ffa(0x1e1)](_0x1b3f7b); }), document[_0x2a8ef2(0x1d4)](_0x2a8ef2(0x1cd), function (_0xedc858) { const _0x4eabcb = _0x2a8ef2; mouseposX = _0xedc858[_0x4eabcb(0x1e2)], mouseposY = _0xedc858[_0x4eabcb(0x1c1)]; }), document[_0x2a8ef2(0x1d4)]('click', initRay), animate(), window[_0x2a8ef2(0x1ad)] = function () { const _0xae1b1c = _0x2a8ef2; camera[_0xae1b1c(0x1e9)] = window['innerWidth'] / window[_0xae1b1c(0x1f9)], camera[_0xae1b1c(0x1db)](), renderer['setSize'](window['innerWidth'], window[_0xae1b1c(0x1f9)]); }; function animate() { const _0x1a3bae = _0x2a8ef2; requestAnimationFrame(animate), TWEEN['update'](); const _0x26e4de = clock[_0x1a3bae(0x1b1)](); for (var _0x18c3ca = 0x0; _0x18c3ca < tagList[0x0][_0x1a3bae(0x1dd)]; _0x18c3ca++) { if (tags[_0x18c3ca] != null) tags[_0x18c3ca][_0x1a3bae(0x1b4)](camera[_0x1a3bae(0x1e0)]); } controls[_0x1a3bae(0x1b7)](), renderer[_0x1a3bae(0x1ae)](scene, camera); } function initRay(_0xaac930) { const _0x2e0e8b = _0x2a8ef2; if (mouseposX != _0xaac930[_0x2e0e8b(0x1e2)] || mouseposY != _0xaac930[_0x2e0e8b(0x1c1)]) return; let _0x399e69 = document[_0x2e0e8b(0x1b2)](_0x2e0e8b(0x1fb)), _0x2c3c4e = (_0xaac930[_0x2e0e8b(0x1e2)] - _0x399e69['getBoundingClientRect']()[_0x2e0e8b(0x1f3)]) / _0x399e69['offsetWidth'] * 0x2 - 0x1, _0x2b3efd = -((_0xaac930['clientY'] - _0x399e69[_0x2e0e8b(0x1c6)]()[_0x2e0e8b(0x1ab)]) / _0x399e69[_0x2e0e8b(0x1b9)]) * 0x2 + 0x1, _0x2ef4c6 = new _0x24f0e4[(_0x2e0e8b(0x1b8))](_0x2c3c4e, _0x2b3efd, 0x1), _0x39edb3 = _0x2ef4c6[_0x2e0e8b(0x1bb)](camera), _0x63974b = _0x39edb3[_0x2e0e8b(0x1fa)](camera['position'])[_0x2e0e8b(0x1fd)](), _0x4f130a = new _0x24f0e4['Raycaster'](camera[_0x2e0e8b(0x1e0)], _0x63974b), _0x1ae55e = _0x4f130a[_0x2e0e8b(0x1cc)](scene[_0x2e0e8b(0x1c2)], !![]); if (_0x1ae55e['length'] > 0x0) { let _0xe919fd = _0x1ae55e[0x0]; console[_0x2e0e8b(0x1bd)](_0xe919fd[_0x2e0e8b(0x1d9)][_0x2e0e8b(0x1ef)]); } } function animateCamera(_0x66feed, _0x140cb4, _0x5427b0) { const _0x45641d = _0x2a8ef2; console['log'](_0x45641d(0x1e0) + _0x66feed['x']); let _0x65dae5 = new TWEEN[(_0x45641d(0x1c4))]({ 'px': camera['position']['x'], 'py': camera[_0x45641d(0x1e0)]['y'], 'pz': camera[_0x45641d(0x1e0)]['z'], 'tx': controls[_0x45641d(0x1cb)]['x'], 'ty': controls[_0x45641d(0x1cb)]['y'], 'tz': controls[_0x45641d(0x1cb)]['z'] }); _0x65dae5['to']({ 'px': _0x66feed['x'], 'py': _0x66feed['y'], 'pz': _0x66feed['z'], 'tx': _0x140cb4['x'], 'ty': _0x140cb4['y'], 'tz': _0x140cb4['z'] }, _0x5427b0), _0x65dae5['onUpdate'](function (_0x26591c) { const _0x4db8ea = _0x45641d; camera[_0x4db8ea(0x1e0)]['x'] = _0x26591c['px'], camera['position']['y'] = _0x26591c['py'], camera['position']['z'] = _0x26591c['pz'], controls[_0x4db8ea(0x1cb)]['x'] = _0x26591c['tx'], controls['target']['y'] = _0x26591c['ty'], controls[_0x4db8ea(0x1cb)]['z'] = _0x26591c['tz'], camera[_0x4db8ea(0x1b4)](controls[_0x4db8ea(0x1cb)]), controls[_0x4db8ea(0x1b7)](); }), _0x65dae5[_0x45641d(0x1af)](); }